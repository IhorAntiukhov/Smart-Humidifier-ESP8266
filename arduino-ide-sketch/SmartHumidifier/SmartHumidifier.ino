#include <ESP8266WiFi.h> // подключаем библиотеку для работы WiFi
#include <PubSubClient.h> // подключаем библиотеку для подключения к клиенту
#include <DHTesp.h> // подключаем библиотеку для считывание температуры и влажности
#include <EEPROM.h> // подключаем библиотеку для доступа к EEPROM памяти
#include <Wire.h> // подключаем библиотеку "Wire"

#define DHTPin D3 // пин к которому подключили датчик температуры и влажности
#define MosfetPin D2 // пин к которому подключили  mosfet транзистор
#define EEPROMSize 512 // указываем размер EEPROM памяти (0-4096 байт)

DHTesp dht; // создаём объект обозначающий датчик температуры и влажности

const char *ssid = "1"; // название точки доступа
const char *pass = "0000000000"; // пароль от выше указанной точки доступа

const char *mqttServer = "tailor.cloudmqtt.com"; // адресс MQTT сервера 
const int mqttPort = 18529; // порт сервера
const char *mqttUser = "ebdknveq"; // имя пользователя
const char *mqttPass = "mYxA1i2dVTGQ"; // пароль пользователя

int minHumidity = 0; // переменная для хранения минимальной влажности при которой включится увлажнитель
int maxHumidity = 0; // переменная для хранения максимальной влажности при которой выключится увлажнитель
int timeout = 0; // переменная для хранения задержки после работы увлажнителя

String minHumidityOutput = ""; // переменная для хранения предупреждения от увлажнителя о минимальной влажности 
String maxHumidityOutput = ""; // переменная для хранения предупреждения от увлажнителя о максимальной влажности
String timeoutOutput = ""; // переменная для хранения предупреждения от увлажнителя о низкой задержке

float humidity = 0; // переменная для хранения текущей влажности
float temperature = 0; // переменная для хранения текущей температуры

String finalOutput; // переменная для хранения сообщения от увлажнителя о удачной настройке

bool wetting = false; // перемменная для проверки всех условий при которых увлажнитель будет нормально работать
bool humidifierState = false; // переменная обозначающая включениве или выключение увлажнителя
bool oneMoreBool = false;
bool firstFlag = false;
bool secondFlag = true;
bool eepromCommited = false;

int timing = 0;

void callback(const MQTT::Publish& pub) { // функция приёма сообщений с mqtt сервера
  Serial.print(pub.topic()); // выводим в СОМ порт название пришедшего топика
  Serial.print(" => ");
  Serial.println(pub.payload_string()); // выводим в СОМ порт число хранящееся в топике

  String payload = pub.payload_string(); // переменная хранящая число из топика
  
  if(String(pub.topic()) == "set_up") { // если пришедший топик называется "wetting"
    wetting = true;   
  }

  if(String(pub.topic()) == "minHumidity") { // если пришедший топик называется "minHumidity"
    minHumidity = payload.toInt();
    wetting = false; 
  }

  if(String(pub.topic()) == "maxHumidity") { // если пришедший топик называется "maxHumidity" 
    maxHumidity = payload.toInt();
    wetting = false; 
  }

  if(String(pub.topic()) == "timeout") { // если пришедший топик называется "timeout"
    timeout = payload.toInt();
    wetting = false;
  }
}

WiFiClient wclient; // создаём обёект обозначающий WiFi клиент     
PubSubClient client(wclient, mqttServer, mqttPort); // создаём обёект обозначающий MQTT клиент 

void setup() {
  Serial.begin(115200); // скорость СОМ порта
  pinMode(MosfetPin, OUTPUT); // настраиваем работу порта к которому подключен mosfet
  dht.setup(DHTPin, DHTesp::DHT11); // указываем порт к которому подключен DHT датчик и его тип (DHT11 или DHT22)
  EEPROM.begin(EEPROMSize); // запускаем EEPROM память и указываем её размер
  
  humidity = round(dht.getHumidity()); // записываем влажность в переменную "humidity"
  temperature = round(dht.getTemperature()); // записываем температуру в переменную "temperature"

  minHumidity = EEPROM.read(0);
  maxHumidity = EEPROM.read(1);
  timeout = EEPROM.read(2);
  humidifierState = EEPROM.read(3);
  wetting = EEPROM.read(4);
}

void loop() {
  Serial.print("мин влажность: ");       Serial.println(minHumidity);
  Serial.print(" макс влажность: ");     Serial.println(maxHumidity);
  Serial.print(" таймаут: ");            Serial.println(timeout);
  Serial.print(" состояние настроек: "); Serial.println(humidifierState);
  Serial.print(" wetting: ");            Serial.println(wetting);
  
  if (WiFi.status() != WL_CONNECTED) { // если плата ESP8266 не подключилась к WiFi
    Serial.print("Подключаемся к ");
    Serial.println(ssid); // выводим название точки доступа
    WiFi.begin(ssid, pass); // подключаемся к WiFi

    if (WiFi.waitForConnectResult() != WL_CONNECTED)
      return;
    Serial.println("Подключились к WiFi");
  }

  // подключаемся к MQTT серверу
 
  while (!client.connected()) { // пока плата ESP8266 не подключилась к MQTT серверу
      Serial.println("Подключаемся к MQTT серверу");
      if (client.connect(MQTT::Connect("arduinoClient2")
         .set_auth(mqttUser, mqttPass))) {
        Serial.println("Подключились к MQTT серверу");
        client.set_callback(callback); // устанавливаем функцию обратного вызова (приёма сообщений)
        client.subscribe("set_up"); // подписываемся на топик "set_up"
        client.subscribe("minHumidity"); // подписываемся на топик "minHumidity"
        client.subscribe("maxHumidity"); // подписываемся на топик "maxHumidity"
        client.subscribe("timeout"); // подписываемся на топик "timeout"
      } else {
        Serial.println("Не вышло подключится к MQTT серверу");   
      }
    }
    
    if (client.connected()){ // если клиент подключился, то
      client.loop();

      if (humidifierState == false) { // если увлажнитель не настроен, то
        client.publish("output", " можете настроить увлажнитель!"); // отправляем на топик "output"  
      }
   
      if (minHumidity < 30 or minHumidity > 90) { // если минимальная влажность меньше 30% и больше 90%
        Serial.println("минимальный порог влажности должен быть в пределах 30 - 90");
        minHumidityOutput = "минимальная влажность должна быть в пределах 30 - 100%; "; // записываем предупреждение о низкой или высокой минимальной влажности
      } else { // иначе
        minHumidityOutput = ""; // удаляем предупреждение
      }

      if (maxHumidity < 60 or maxHumidity > 90) { // если максимальная влажность меньше 60% и больше 90%
        Serial.println("максимальный порог влажности должен быть в пределах 60 - 90");
        maxHumidityOutput = "максимальная влажность должна быть в пределах 60 - 100%; "; // записываем предупреждение о низкой или высокой максимальной влажности
      } else {
        maxHumidityOutput = ""; // удаляем предупреждение
      }

      if (timeout < 30 or timeout > 500) { // если таймаут меньше 30 и больше 500 секунд
        Serial.println("таймаут должен быть в пределах 30 - 500 секунд");
        timeoutOutput = "таймаут должен быть в пределах 30 - 500 секунд; "; // записываем предупреждение о низком или высоком таймауте
      } else {
        timeoutOutput = ""; // удаляем предупреждение
      }

      if (wetting == true) { // если пользователь настроил увлажнитель
        if (minHumidityOutput != "" or maxHumidityOutput != "" or timeoutOutput != "") { // если есть какие-то предупреждения о неправильных настройках
          humidifierState = false; // выключаем настройки увлажнителя
          client.publish("output", minHumidityOutput + maxHumidityOutput + timeoutOutput); // публикуем предупреждения на топик "output"
          Serial.print("таймаут: ");
          Serial.print(timeout); // выводим таймаут
          Serial.print("минимальная влажность: ");
          Serial.print(minHumidity); // выводим минимальную влажность
          Serial.print("максимальная влажность: ");
          Serial.println(maxHumidity); // выводим максимальную влажность
          Serial.println("у вас неправильно настроен увлажнитель :(");
          delay(5000);
          wetting = false;
          
          delay(5000);
        } else { // иначе
          humidifierState = true; // настраиваем увлажнитель
          
          // создаём переменную с настройками        
          finalOutput = "Мин влажность: " + String(minHumidity) +
          "% Mакс влажность: " + String(maxHumidity) + "% Tаймаут: " + String(timeout) + " секунд";

          if (!eepromCommited) {
            EEPROM.write(0, minHumidity); // записываем в EEPROM влажность при которой увлажнитель включится
            EEPROM.write(1, maxHumidity); // записываем в EEPROM влажность при которой увлажнитель выключится
            EEPROM.write(2, timeout); // записываем в EEPROM задержку между измерениями температуры и влажности
            EEPROM.write(3, humidifierState); // записываем в EEPROM состояние настроек (true - увлажнитель настроен, false - увлажнитель не настроен)
            EEPROM.write(4, wetting); // записываем в EEPROM состояние переменной wetting
  
            if (EEPROM.commit()) {
              eepromCommited = true;
              Serial.println("запись данных в EEPROM прошла успешно!");
            } else {
              Serial.println("записать данные в EEPROM не вышло :-(");
            }
         
            if (oneMoreBool == false) { // если увлажнитель не включился и не выключился, то
              client.publish("output", finalOutput); // отправляем настройки на топик "output"
            }
          }

          if (humidity < minHumidity) { // если влажность упала ниже определённого значения
            digitalWrite(D2, HIGH); // подаём сигнал HIGH на mosfet
            Serial.println("влажность упала ниже определённого значения!");
            client.publish("output", "влажность стала слишком низкой! Увлажнитель включен");
            oneMoreBool = true;
          }

          if (humidity > maxHumidity) { // если влажность поднялась выше определённого значения
            digitalWrite(D2, LOW); // подаём сигнал LOW на mosfet
            Serial.println("влажность поднялась выше определённого значения!");
            client.publish("output", "влажность нормализовалась! Увлажнитель выключился");
            oneMoreBool = true;
         }          
      }
    }

    if (millis() - timing > timeout*1000) { // считываем температуру и влажность раз в определённое время
      timing = millis();
         
      humidity = round(dht.getHumidity()); // записываем влажность в переменную "humidity"
      temperature = round(dht.getTemperature()); // записываем температуру в переменную "temperature"
       
      Serial.print("Temp: ");
      Serial.print(temperature);
      client.publish("temp",String(temperature)); // отправляем температуру на топик "temp"
      Serial.print(" Hum: ");
      Serial.println(humidity);
      client.publish("hum",String(humidity)); // отправляем влажность на топик "hum"
    }

    delay(500);
    
  }
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
